---LinkP4.ml log---
[link_p4] p4_syntax_tree:
Seq [[
    Noop [[/* 
This harness is for: 
    - entry events generated by triggers in the file ip_harness_triggers.json
    - entry events use fields from headers defined and parsed in this harness
    - exit events handled manually after @DPT_HANDLERS
*/]]
    Noop [[#include <core.p4>]]
    Noop [[#include <tna.p4>]]
    Seq [[
        Expr [[]]
        Pragma [[DPT_HEADERS]]()
        ]] EndSeq 
    Noop [[/*=============================================
=            Headers and metadata.            =
=============================================*/]]
    Stmt [[typedef bit<48> mac_addr_t;]]
    Block [[header ethernet_h]]{
        Seq [[
            Stmt [[mac_addr_t dst_addr;]]
            Stmt [[mac_addr_t src_addr;]]
            Stmt [[bit<16> ether_type;]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[header ethernet_h]]
    Stmt [[typedef bit<32> ipv4_addr_t;]]
    Block [[header ipv4_h]]{
        Seq [[
            Stmt [[bit<4> version;]]
            Stmt [[bit<4> ihl;]]
            Stmt [[bit<8> tos;]]
            Stmt [[bit<16> total_len;]]
            Stmt [[bit<16> identification;]]
            Stmt [[bit<3> flags;]]
            Stmt [[bit<13> frag_offset;]]
            Stmt [[bit<8> ttl;]]
            Stmt [[bit<8> protocol;]]
            Stmt [[bit<16> hdr_checksum;]]
            Stmt [[ipv4_addr_t src_addr;]]
            Stmt [[ipv4_addr_t dst_addr;]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[header ipv4_h]]
    Block [[struct ip_event_fields_t]]{
        Seq [[
            Stmt [[bit<8> tos;]]
            Stmt [[bit<16> len;]]
            Stmt [[ipv4_addr_t src;]]
            Stmt [[ipv4_addr_t dst;]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[struct ip_event_fields_t]]
    Noop [[// Global headers and metadata]]
    Block [[struct header_t]]{
        Seq [[
            Stmt [[ethernet_h ethernet;]]
            Seq [[
                Expr [[]]
                Pragma [[DPT_HEADER_INSTANCES]]()
                ]] EndSeq 
            Stmt [[ipv4_h ip;]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[struct header_t]]
    Block [[struct metadata_t]]{
        Seq [[
            Seq [[
                Expr [[]]
                Pragma [[DPT_METADATA_INSTANCES]]()
                ]] EndSeq 
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[struct metadata_t]]
    Seq [[
        Expr [[]]
        Pragma [[DPT_PARSER]]()
        ]] EndSeq 
    Noop [[/*===============================
=            Parsing            =
===============================*/]]
    Noop [[// Parser for tofino-specific metadata.]]
    Block [[parser TofinoIngressParser(
        packet_in pkt,        
        out ingress_intrinsic_metadata_t ig_intr_md,
        out header_t hdr,
        out metadata_t md)]]{
        Seq [[
            Block [[state start]]{
                Seq [[
                    Stmt [[pkt.extract(ig_intr_md);]]
                    Noop [[// DPT: populate metadata.]]
                    Stmt [[md.dptMeta.exitEventType = 0;]]
                    Stmt [[md.dptMeta.nextEventType = 0;]]
                    Stmt [[md.dptMeta.timestamp = (bit<32>)(ig_intr_md.ingress_mac_tstamp[47:16]);]]
                    Block [[transition select(ig_intr_md.resubmit_flag)]]{
                        Seq [[
                            Stmt [[1 : parse_resubmit;]]
                            Stmt [[0 : parse_port_metadata;]]
                            Noop [[]]
                            ]] EndSeq 
                        } EndBlock [[transition select(ig_intr_md.resubmit_flag)]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state start]]
            Block [[state parse_resubmit]]{
                Seq [[
                    Noop [[// Parse resubmitted packet here.]]
                    Stmt [[transition reject;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state parse_resubmit]]
            Block [[state parse_port_metadata]]{
                Seq [[
                    Stmt [[pkt.advance(64);]]
                    Noop [[// skip this.]]
                    Stmt [[transition accept;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state parse_port_metadata]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[parser TofinoIngressParser(
        packet_in pkt,        
        out ingress_intrinsic_metadata_t ig_intr_md,
        out header_t hdr,
        out metadata_t md)]]
    Noop [[// MANUAL HARNESS CODE]]
    Stmt [[const bit<16> ETHERTYPE_IPV4 = 16w0x0800;]]
    Stmt [[const bit<16> ETHERTYPE_DPT = 0x1111;]]
    Block [[parser EthIpParser(packet_in pkt, out header_t hdr, out metadata_t md)]]{
        Seq [[
            Stmt [[DptIngressParser() dptIngressParser;]]
            Noop [[// MANUAL HARNESS CODE]]
            Block [[state start]]{
                Seq [[
                    Stmt [[pkt.extract(hdr.ethernet);]]
                    Block [[transition select(hdr.ethernet.ether_type)]]{
                        Seq [[
                            Stmt [[ETHERTYPE_IPV4 : parse_ip;]]
                            Stmt [[ETHERTYPE_DPT  : parse_dpt;]]
                            Stmt [[default : accept;]]
                            Noop [[]]
                            ]] EndSeq 
                        } EndBlock [[transition select(hdr.ethernet.ether_type)]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state start]]
            Noop [[// MANUAL HARNESS CODE]]
            Block [[state parse_dpt]]{
                Seq [[
                    Stmt [[dptIngressParser.apply(pkt, hdr, md);]]
                    Stmt [[transition parse_ip;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state parse_dpt]]
            Block [[state parse_ip]]{
                Seq [[
                    Stmt [[pkt.extract(hdr.ip);]]
                    Stmt [[transition accept;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state parse_ip]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[parser EthIpParser(packet_in pkt, out header_t hdr, out metadata_t md)]]
    Block [[parser TofinoEgressParser(
        packet_in pkt,
        out egress_intrinsic_metadata_t eg_intr_md)]]{
        Seq [[
            Block [[state start]]{
                Seq [[
                    Stmt [[pkt.extract(eg_intr_md);]]
                    Stmt [[transition accept;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state start]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[parser TofinoEgressParser(
        packet_in pkt,
        out egress_intrinsic_metadata_t eg_intr_md)]]
    Noop [[/*========================================
=            Ingress parsing             =
========================================*/]]
    Block [[parser IngressParser(
        packet_in pkt,
        out header_t hdr, 
        out metadata_t md,
        out ingress_intrinsic_metadata_t ig_intr_md)]]{
        Seq [[
            Block [[state start]]{
                Seq [[
                    Stmt [[TofinoIngressParser.apply(pkt, ig_intr_md, hdr, md);]]
                    Stmt [[EthIpParser.apply(pkt, hdr, md);]]
                    Stmt [[transition accept;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state start]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[parser IngressParser(
        packet_in pkt,
        out header_t hdr, 
        out metadata_t md,
        out ingress_intrinsic_metadata_t ig_intr_md)]]
    Block [[control CiL2Fwd(
        in ingress_intrinsic_metadata_t ig_intr_md,
        inout ingress_intrinsic_metadata_for_tm_t ig_tm_md)]]{
        Seq [[
            Noop [[/* Basic L2 forwarding */]]
            Block [[action aiOut(bit<9> out_port)]]{
                Seq [[
                    Stmt [[ig_tm_md.ucast_egress_port = out_port;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[action aiOut(bit<9> out_port)]]
            Block [[action aiNoop()]]{
                Seq [[
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[action aiNoop()]]
            Block [[action aiReflect()]]{
                Seq [[
                    Stmt [[ig_tm_md.ucast_egress_port = ig_intr_md.ingress_port;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[action aiReflect()]]
            Block [[table tiWire]]{
                Seq [[
                    Block [[key =]]{
                        Seq [[
                            Stmt [[ig_intr_md.ingress_port : exact;]]
                            Noop [[]]
                            ]] EndSeq 
                        } EndBlock [[key =]]
                    Block [[actions =]]{
                        Seq [[
                            Stmt [[aiOut;]]
                            Stmt [[aiNoop;]]
                            Stmt [[aiReflect;]]
                            Noop [[]]
                            ]] EndSeq 
                        } EndBlock [[actions =]]
                    Stmt [[const default_action = aiReflect();]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[table tiWire]]
            Block [[apply]]{
                Seq [[
                    Stmt [[tiWire.apply();]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[apply]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[control CiL2Fwd(
        in ingress_intrinsic_metadata_t ig_intr_md,
        inout ingress_intrinsic_metadata_for_tm_t ig_tm_md)]]
    Noop [[/*===========================================
=            ingress match-action             =
===========================================*/]]
    Block [[control Ingress(
        inout header_t hdr, 
        inout metadata_t md,
        in ingress_intrinsic_metadata_t ig_intr_md,
        in ingress_intrinsic_metadata_from_parser_t ig_prsr_md,
        inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md,
        inout ingress_intrinsic_metadata_for_tm_t ig_tm_md)]]{
        Seq [[
            Seq [[
                Expr [[]]
                Pragma [[ENTRY_OBJECTS]]()
                ]] EndSeq 
            Seq [[
                Expr [[]]
                Pragma [[EXIT_OBJECTS]]()
                ]] EndSeq 
            Seq [[
                Expr [[]]
                Pragma [[DPT_OBJECTS]]()
                ]] EndSeq 
            Stmt [[CiL2Fwd() ciL2Fwd;]]
            Block [[action use_ip_out_event()]]{
                Seq [[
                    Stmt [[ig_tm_md.ucast_egress_port = md.ip_out.egr_port;]]
                    Stmt [[hdr.ip.src_addr = md.ip_out.src;]]
                    Stmt [[hdr.ip.dst_addr = md.ip_out.dst;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[action use_ip_out_event()]]
            Block [[apply]]{
                Seq [[
                    Noop [[// If the packet is not a background event packet,]]
                    Noop [[// call the entry event trigger table.]]
                    Noop [[// This will add an "entry" event to the]]
                    Noop [[// packet if one of the triggering conditions]]
                    Noop [[// matches.]]
                    Seq [[
                        Expr [[]]
                        Pragma [[ENTRY_CALL]]()
                        ]] EndSeq 
                    Noop [[// if the packet has an event, call lucid]]
                    Noop [[// then apply]]
                    Noop [[// an exit action]]
                    Block [[if (md.dptMeta.eventType != 0)]]{
                        Seq [[
                            Seq [[
                                Expr [[]]
                                Pragma [[DPT_HANDLERS]]()
                                ]] EndSeq 
                            Seq [[
                                Expr [[]]
                                Pragma [[EXIT_CALL]]()
                                ]] EndSeq 
                            Noop [[]]
                            ]] EndSeq 
                        } EndBlock [[if (md.dptMeta.eventType != 0)]]
                    Noop [[// Otherwise, do custom p4 processing]]
                    Noop [[// to the packet.]]
                    Block [[else]]{
                        Seq [[
                            Stmt [[ciL2Fwd.apply(ig_intr_md, ig_tm_md);]]
                            Noop [[]]
                            ]] EndSeq 
                        } EndBlock [[else]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[apply]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[control Ingress(
        inout header_t hdr, 
        inout metadata_t md,
        in ingress_intrinsic_metadata_t ig_intr_md,
        in ingress_intrinsic_metadata_from_parser_t ig_prsr_md,
        inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md,
        inout ingress_intrinsic_metadata_for_tm_t ig_tm_md)]]
    Block [[control IngressDeparser(
        packet_out pkt, 
        inout header_t hdr, 
        in metadata_t md,
        in ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md)]]{
        Seq [[
            Block [[apply]]{
                Seq [[
                    Stmt [[pkt.emit(hdr);]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[apply]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[control IngressDeparser(
        packet_out pkt, 
        inout header_t hdr, 
        in metadata_t md,
        in ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md)]]
    Noop [[/*======================================
=            Egress parsing            =
======================================*/]]
    Block [[parser EgressParser(
        packet_in pkt,
        out header_t hdr, 
        out metadata_t eg_md,
        out egress_intrinsic_metadata_t eg_intr_md)]]{
        Seq [[
            Stmt [[TofinoEgressParser() tofino_parser;]]
            Stmt [[EthIpParser() eth_ip_parser;]]
            Block [[state start]]{
                Seq [[
                    Stmt [[tofino_parser.apply(pkt, eg_intr_md);]]
                    Stmt [[transition parse_packet;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state start]]
            Block [[state parse_packet]]{
                Seq [[
                    Stmt [[eth_ip_parser.apply(pkt, hdr, eg_md);]]
                    Stmt [[transition accept;]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[state parse_packet]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[parser EgressParser(
        packet_in pkt,
        out header_t hdr, 
        out metadata_t eg_md,
        out egress_intrinsic_metadata_t eg_intr_md)]]
    Noop [[/*=========================================
=            Egress match-action            =
=========================================*/]]
    Block [[control Egress(
        inout header_t hdr, 
        inout metadata_t eg_mg,
        in egress_intrinsic_metadata_t eg_intr_md,
        in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
        inout egress_intrinsic_metadata_for_deparser_t eg_dprsr_md,
        inout egress_intrinsic_metadata_for_output_port_t eg_oport_md)]]{
        Seq [[
            Seq [[
                Expr [[]]
                Pragma [[DPT_EGRESS_OBJECTS]]()
                ]] EndSeq 
            Block [[apply]]{
                Seq [[
                    Seq [[
                        Expr [[]]
                        Pragma [[DPT_EGRESS]]()
                        ]] EndSeq 
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[apply]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[control Egress(
        inout header_t hdr, 
        inout metadata_t eg_mg,
        in egress_intrinsic_metadata_t eg_intr_md,
        in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
        inout egress_intrinsic_metadata_for_deparser_t eg_dprsr_md,
        inout egress_intrinsic_metadata_for_output_port_t eg_oport_md)]]
    Block [[control EgressDeparser(
        packet_out pkt,
        inout header_t hdr, 
        in metadata_t eg_md,
        in egress_intrinsic_metadata_for_deparser_t eg_dprsr_md)]]{
        Seq [[
            Block [[apply]]{
                Seq [[
                    Stmt [[pkt.emit(hdr);]]
                    Noop [[]]
                    ]] EndSeq 
                } EndBlock [[apply]]
            Noop [[]]
            ]] EndSeq 
        } EndBlock [[control EgressDeparser(
        packet_out pkt,
        inout header_t hdr, 
        in metadata_t eg_md,
        in egress_intrinsic_metadata_for_deparser_t eg_dprsr_md)]]
    Noop [[/*==============================================
=            The switch's pipeline             =
==============================================*/]]
    Stmt [[Pipeline(
    IngressParser(), Ingress(), IngressDeparser(),
    EgressParser(), Egress(), EgressDeparser()) pipe;]]
    Stmt [[Switch(pipe) main;]]
    ]] EndSeq 

[pragma_replace_trans] -------------- block: DPT_OBJECTS--------------
[pragma_replace_trans] code:
 
    bit<32> cur_idx;
    
    bit<32> column_ct;
    
    bit<32> if_precomp;
    
    bit<32> precompute;
    
    bit<16> if_precomp1238;
    
    bit<16> if_precomp1237;
    
    bit<16> if_precomp1236;
    
    bit<32> total_ct;
    
    Register<fmt_hist_arr, bit<32>>(4) hist_arr;
    
    Register<fmt_total_arr, bit<32>>(1) total_arr;
    
    
    
    action dpt_1328_generate_alu_0_opstmt( ){
        md.ip_out.eventType = 3;
        md.ip_out.eventLoc = 0;
        md.ip_out.eventDelay = 0;
        md.ip_out.egr_port = md.ip_in.igr_port;
        md.ip_out.src = md.ip_in.src;
        md.ip_out.dst = md.ip_in.dst;
        md.dptMeta.exitEventType = 3;
        
    }
    
    action dpt_1281_alu_0_opstmt( ){
        if_precomp1238 = 128 |-| md.ip_in.len;
        
    }
    
    action dpt_1280_alu_0_opstmt( ){
        cur_idx = 0;
        
    }
    
    action dpt_1253_alu_0_opstmt( ){
        cur_idx = hdr.report.idx;
        
    }
    
    action dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop( ){
        //next tables: []
        
    }
    
    action dpt_1328_merged_acn_1_noop_1341_acn_0_opstmt_1280_acn_0_opstmt_1281_acn_0_opstmt( ){
        dpt_1280_alu_0_opstmt();
        dpt_1281_alu_0_opstmt();
        dpt_1328_generate_alu_0_opstmt();
        //next tables: [dpt_1287_tbl_0_opstmt, dpt_1288_tbl_0_opstmt]
        
    }
    
    action dpt_1435_merged_acn_1_acn_0_opstmt_1253_noop_1343_noop_1347_noop( ){
        dpt_1253_alu_0_opstmt();
        //next tables: [dpt_1254_tbl_0_opstmt]
        
    }
    
    @pragma stage 0
    table dpt_1_merged_tbl {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_1435_merged_acn_1_acn_0_opstmt_1253_noop_1343_noop_1347_noop;
            dpt_1328_merged_acn_1_noop_1341_acn_0_opstmt_1280_acn_0_opstmt_1281_acn_0_opstmt;
            dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop;
        }
        const entries = {
            2 : dpt_1435_merged_acn_1_acn_0_opstmt_1253_noop_1343_noop_1347_noop();
            1 : dpt_1328_merged_acn_1_noop_1341_acn_0_opstmt_1280_acn_0_opstmt_1281_acn_0_opstmt();
            _ : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
        }
        
    }
    
    action dpt_1288_alu_0_opstmt( ){
        if_precomp1237 = 512 |-| md.ip_in.len;
        
    }
    
    RegisterAction<fmt_total_arr,bit<32>,bit<32>>(total_arr) dpt_1321_sprog_1562_salu_0_opstmt = {
        void apply(inout fmt_total_arr remote, out bit<32> remoteRet) {
            fmt_total_arr local = remote;
            remoteRet=1 + local.lo;
            remote.lo=1 + local.lo;
        }
    };
    action dpt_1321_salu_0_opstmt() {
        total_ct=dpt_1321_sprog_1562_salu_0_opstmt.execute((bit<32>)0);
    }
    
    RegisterAction<fmt_total_arr,bit<32>,bit<32>>(total_arr) dpt_1262_sprog_1563_salu_0_opstmt = {
        void apply(inout fmt_total_arr remote, out bit<32> remoteRet) {
            fmt_total_arr local = remote;
            remote.lo=0;
        }
    };
    action dpt_1262_salu_0_opstmt() {
        dpt_1262_sprog_1563_salu_0_opstmt.execute((bit<32>)0);
    }
    
    action dpt_1263_alu_0_opstmt( ){
        if_precomp = 3 |-| cur_idx;
        
    }
    
    action dpt_1321_merged_acn_2_noop_1371_noop_1359_acn_0_opstmt_1287_noop_1363_acn_0_opstmt( ){
        dpt_1280_alu_0_opstmt();
        dpt_1321_salu_0_opstmt();
        //next tables: [dpt_1294_tbl_0_opstmt, dpt_1327_tbl_0_opstmt, dpt_1328_tbl_0_opstmt]
        
    }
    
    action dpt_1321_merged_acn_2_noop_1371_acn_0_opstmt_1288_noop_1357_noop_1363_acn_0_opstmt( ){
        dpt_1288_alu_0_opstmt();
        dpt_1321_salu_0_opstmt();
        //next tables: [dpt_1300_tbl_0_opstmt, dpt_1301_tbl_0_opstmt, dpt_1327_tbl_0_opstmt, dpt_1328_tbl_0_opstmt]
        
    }
    
    action dpt_1429_merged_acn_2_acn_0_opstmt_1263_noop_1359_noop_1355_noop_1363_noop( ){
        dpt_1263_alu_0_opstmt();
        //next tables: [dpt_1272_tbl_0_opstmt]
        
    }
    
    action dpt_1429_merged_acn_2_acn_0_opstmt_1263_noop_1359_noop_1355_acn_0_opstmt_1262_noop( ){
        dpt_1263_alu_0_opstmt();
        dpt_1262_salu_0_opstmt();
        //next tables: [dpt_1272_tbl_0_opstmt, dpt_1263_tbl_0_opstmt]
        
    }
    
    @pragma stage 1
    table dpt_2_merged_tbl {
        key = {
            md.dptMeta.eventType : ternary;
            md.ip_in.len : ternary;
            if_precomp1238 : ternary;
            cur_idx : ternary;
        }
        actions = {
            dpt_1429_merged_acn_2_acn_0_opstmt_1263_noop_1359_noop_1355_acn_0_opstmt_1262_noop;
            dpt_1429_merged_acn_2_acn_0_opstmt_1263_noop_1359_noop_1355_noop_1363_noop;
            dpt_1321_merged_acn_2_noop_1371_noop_1359_acn_0_opstmt_1287_noop_1363_acn_0_opstmt;
            dpt_1321_merged_acn_2_noop_1371_acn_0_opstmt_1288_noop_1357_noop_1363_acn_0_opstmt;
            dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop;
        }
        const entries = {
            (2, _, _, 0) : dpt_1429_merged_acn_2_acn_0_opstmt_1263_noop_1359_noop_1355_acn_0_opstmt_1262_noop();
            (2, _, _, _) : dpt_1429_merged_acn_2_acn_0_opstmt_1263_noop_1359_noop_1355_noop_1363_noop();
            (1, 128, 0, _) : dpt_1321_merged_acn_2_noop_1371_noop_1359_acn_0_opstmt_1287_noop_1363_acn_0_opstmt();
            (1, _, 0, _) : dpt_1321_merged_acn_2_noop_1371_acn_0_opstmt_1288_noop_1357_noop_1363_acn_0_opstmt();
            (1, _, _, _) : dpt_1321_merged_acn_2_noop_1371_noop_1359_acn_0_opstmt_1287_noop_1363_acn_0_opstmt();
            (_, _, _, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
        }
        
    }
    
    action dpt_1301_alu_0_opstmt( ){
        if_precomp1236 = 1024 |-| md.ip_in.len;
        
    }
    
    action dpt_1327_generate_alu_0_opstmt( ){
        hdr.report.eventType = 2;
        hdr.report.eventLoc = 0;
        hdr.report.eventDelay = 0;
        hdr.report.setValid();
        hdr.lucid_footer.setValid();
        hdr.lucid_footer.end = 0;
        hdr.report.idx = 0;
        md.dptMeta.nextEventType = 2;
        md.dptMeta.eventsCount = md.dptMeta.eventsCount + 1;
        hdr.ev_out_flags.setValid();
        hdr.ev_out_flags.report = 1;
        
    }
    
    action dpt_1300_alu_0_opstmt( ){
        cur_idx = 1;
        
    }
    
    action dpt_1272_alu_0_opstmt( ){
        precompute = 1 + cur_idx;
        
    }
    
    action dpt_1327_merged_acn_3_noop_1399_noop_1381_noop_1373_acn_0_opstmt( ){
        dpt_1327_generate_alu_0_opstmt();
        //next tables: [dpt_1328_tbl_0_opstmt]
        
    }
    
    action dpt_1433_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_noop( ){
        dpt_1300_alu_0_opstmt();
        //next tables: [dpt_1294_tbl_0_opstmt]
        
    }
    
    action dpt_1327_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_acn_0_opstmt( ){
        dpt_1300_alu_0_opstmt();
        dpt_1327_generate_alu_0_opstmt();
        //next tables: [dpt_1294_tbl_0_opstmt, dpt_1328_tbl_0_opstmt]
        
    }
    
    action dpt_1433_merged_acn_3_noop_1399_acn_0_opstmt_1301_noop_1377_noop( ){
        dpt_1301_alu_0_opstmt();
        //next tables: [dpt_1312_tbl_0_opstmt, dpt_1313_tbl_0_opstmt]
        
    }
    
    action dpt_1327_merged_acn_3_noop_1399_acn_0_opstmt_1301_noop_1377_acn_0_opstmt( ){
        dpt_1301_alu_0_opstmt();
        dpt_1327_generate_alu_0_opstmt();
        //next tables: [dpt_1312_tbl_0_opstmt, dpt_1313_tbl_0_opstmt, dpt_1328_tbl_0_opstmt]
        
    }
    
    action dpt_1433_merged_acn_3_acn_0_opstmt_1272_noop_1381_noop_1373_noop( ){
        dpt_1272_alu_0_opstmt();
        //next tables: [dpt_1276_tbl_0_opstmt]
        
    }
    
    @pragma stage 2
    table dpt_3_merged_tbl {
        key = {
            if_precomp : ternary;
            md.dptMeta.eventType : ternary;
            if_precomp1237 : ternary;
            md.ip_in.len : ternary;
            if_precomp1238 : ternary;
            total_ct : ternary;
        }
        actions = {
            dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop;
            dpt_1433_merged_acn_3_acn_0_opstmt_1272_noop_1381_noop_1373_noop;
            dpt_1327_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_acn_0_opstmt;
            dpt_1433_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_noop;
            dpt_1327_merged_acn_3_noop_1399_noop_1381_noop_1373_acn_0_opstmt;
            dpt_1327_merged_acn_3_noop_1399_acn_0_opstmt_1301_noop_1377_acn_0_opstmt;
            dpt_1433_merged_acn_3_noop_1399_acn_0_opstmt_1301_noop_1377_noop;
        }
        const entries = {
            (0, 2, _, _, _, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 2, _, _, _, _) : dpt_1433_merged_acn_3_acn_0_opstmt_1272_noop_1381_noop_1373_noop();
            (_, 1, 0, 512, 0, 4) : dpt_1327_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_acn_0_opstmt();
            (_, 1, 0, 512, 0, _) : dpt_1433_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_noop();
            (_, 1, 0, 128, 0, 4) : dpt_1327_merged_acn_3_noop_1399_noop_1381_noop_1373_acn_0_opstmt();
            (_, 1, 0, 128, 0, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 1, 0, _, 0, 4) : dpt_1327_merged_acn_3_noop_1399_acn_0_opstmt_1301_noop_1377_acn_0_opstmt();
            (_, 1, 0, _, 0, _) : dpt_1433_merged_acn_3_noop_1399_acn_0_opstmt_1301_noop_1377_noop();
            (_, 1, _, 128, 0, 4) : dpt_1327_merged_acn_3_noop_1399_noop_1381_noop_1373_acn_0_opstmt();
            (_, 1, _, 128, 0, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 1, _, _, 0, 4) : dpt_1327_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_acn_0_opstmt();
            (_, 1, _, _, 0, _) : dpt_1433_merged_acn_3_noop_1399_noop_1381_acn_0_opstmt_1300_noop();
            (_, 1, _, _, _, 4) : dpt_1327_merged_acn_3_noop_1399_noop_1381_noop_1373_acn_0_opstmt();
            (_, _, _, _, _, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
        }
        
    }
    
    action dpt_1313_alu_0_opstmt( ){
        cur_idx = 3;
        
    }
    
    action dpt_1312_alu_0_opstmt( ){
        cur_idx = 2;
        
    }
    
    action dpt_1276_generate_alu_0_opstmt( ){
        hdr.report.eventType = 2;
        hdr.report.eventLoc = 0;
        hdr.report.eventDelay = 0;
        hdr.report.setValid();
        hdr.lucid_footer.setValid();
        hdr.lucid_footer.end = 0;
        hdr.report.idx = precompute;
        md.dptMeta.nextEventType = 2;
        md.dptMeta.eventsCount = md.dptMeta.eventsCount + 1;
        hdr.ev_out_flags.setValid();
        hdr.ev_out_flags.report = 1;
        
    }
    
    action dpt_1312_merged_acn_4_noop_1423_noop_1415_acn_0_opstmt( ){
        dpt_1312_alu_0_opstmt();
        //next tables: [dpt_1294_tbl_0_opstmt]
        
    }
    
    action dpt_1409_merged_acn_4_noop_1423_acn_0_opstmt_1313_noop( ){
        dpt_1313_alu_0_opstmt();
        //next tables: [dpt_1294_tbl_0_opstmt]
        
    }
    
    action dpt_1403_merged_acn_4_acn_0_opstmt_1276_noop_1415_noop( ){
        dpt_1276_generate_alu_0_opstmt();
        //next tables: []
        
    }
    
    @pragma stage 3
    table dpt_4_merged_tbl {
        key = {
            if_precomp : ternary;
            md.dptMeta.eventType : ternary;
            if_precomp1236 : ternary;
            if_precomp1237 : ternary;
            md.ip_in.len : ternary;
            if_precomp1238 : ternary;
        }
        actions = {
            dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop;
            dpt_1403_merged_acn_4_acn_0_opstmt_1276_noop_1415_noop;
            dpt_1312_merged_acn_4_noop_1423_noop_1415_acn_0_opstmt;
            dpt_1409_merged_acn_4_noop_1423_acn_0_opstmt_1313_noop;
        }
        const entries = {
            (0, 2, _, _, _, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 2, _, _, _, _) : dpt_1403_merged_acn_4_acn_0_opstmt_1276_noop_1415_noop();
            (_, 1, 0, 0, 1024, 0) : dpt_1312_merged_acn_4_noop_1423_noop_1415_acn_0_opstmt();
            (_, 1, 0, 0, 512, 0) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 1, 0, 0, 128, 0) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 1, 0, 0, _, 0) : dpt_1409_merged_acn_4_noop_1423_acn_0_opstmt_1313_noop();
            (_, 1, _, 0, 512, 0) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 1, _, 0, 128, 0) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
            (_, 1, _, 0, _, 0) : dpt_1312_merged_acn_4_noop_1423_noop_1415_acn_0_opstmt();
            (_, _, _, _, _, _) : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
        }
        
    }
    
    RegisterAction<fmt_hist_arr,bit<32>,bit<32>>(hist_arr) dpt_1294_sprog_1564_salu_0_opstmt = {
        void apply(inout fmt_hist_arr remote, out bit<32> remoteRet) {
            fmt_hist_arr local = remote;
            remote.lo=1 + local.lo;
        }
    };
    action dpt_1294_salu_0_opstmt() {
        dpt_1294_sprog_1564_salu_0_opstmt.execute((bit<32>)cur_idx);
    }
    
    RegisterAction<fmt_hist_arr,bit<32>,bit<32>>(hist_arr) dpt_1254_sprog_1565_salu_0_opstmt = {
        void apply(inout fmt_hist_arr remote, out bit<32> remoteRet) {
            fmt_hist_arr local = remote;
            remoteRet=local.lo;
            remote.lo=0;
        }
    };
    action dpt_1254_salu_0_opstmt() {
        column_ct=dpt_1254_sprog_1565_salu_0_opstmt.execute((bit<32>)cur_idx);
    }
    
    action dpt_1294_merged_acn_5_noop_1345_acn_0_opstmt( ){
        dpt_1294_salu_0_opstmt();
        //next tables: [dpt_1321_tbl_0_opstmt]
        
    }
    
    action dpt_1427_merged_acn_5_acn_0_opstmt_1254_noop( ){
        dpt_1254_salu_0_opstmt();
        //next tables: [dpt_1256_tbl_0_opstmt]
        
    }
    
    @pragma stage 4
    table dpt_5_merged_tbl {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_1427_merged_acn_5_acn_0_opstmt_1254_noop;
            dpt_1294_merged_acn_5_noop_1345_acn_0_opstmt;
            dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop;
        }
        const entries = {
            2 : dpt_1427_merged_acn_5_acn_0_opstmt_1254_noop();
            1 : dpt_1294_merged_acn_5_noop_1345_acn_0_opstmt();
            _ : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
        }
        
    }
    
    action dpt_1256_generate_alu_0_opstmt( ){
        md.ip_out.eventType = 3;
        md.ip_out.eventLoc = 0;
        md.ip_out.eventDelay = 0;
        md.ip_out.egr_port = 132;
        md.ip_out.src = cur_idx;
        md.ip_out.dst = column_ct;
        md.dptMeta.exitEventType = 3;
        
    }
    
    action dpt_1256_merged_acn_6_acn_0_opstmt( ){
        dpt_1256_generate_alu_0_opstmt();
        //next tables: [dpt_1262_tbl_0_opstmt, dpt_1263_tbl_0_opstmt]
        
    }
    
    @pragma stage 5
    table dpt_6_merged_tbl {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_1256_merged_acn_6_acn_0_opstmt;
            dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop;
        }
        const entries = {
            2 : dpt_1256_merged_acn_6_acn_0_opstmt();
            _ : dpt_1435_merged_acn_1_noop_1341_noop_1343_noop_1347_noop();
        }
        
    }
     
    action from_any_to_none() {
  ig_dprsr_md.drop_ctl = 0x1;
  exit;
}
action from_bg_to_wire() {
  hdr.ethernet.ether_type = 0x0800;
  ig_tm_md.ucast_egress_port = (bit<9>)md.dptMeta.outPort;
  hdr.report.setInvalid();
  hdr.lucid_footer.setInvalid();
  hdr.ev_out_flags.setInvalid();
}
action from_bg_to_selfbg() {
  ig_tm_md.mcast_grp_a = 1065 + md.dptMeta.eventsCount;
  hdr.ethernet.ether_type = 0x1111;
  exit;
}
action from_bg_to_selfbg_wire() {
  ig_tm_md.ucast_egress_port = (bit<9>)md.dptMeta.outPort;
  ig_tm_md.mcast_grp_a = 1065 + md.dptMeta.eventsCount;
  hdr.ethernet.ether_type = 0x1111;
}
action bg_hdl_report_to_otherbg() {
  hdr.report.setInvalid();
  ig_tm_md.mcast_grp_a = 1065 + md.dptMeta.eventsCount;
  hdr.ethernet.ether_type = 0x1111;
  exit;
}
action bg_hdl_report_to_otherbg_wire() {
  ig_tm_md.ucast_egress_port = (bit<9>)md.dptMeta.outPort;
  hdr.report.setInvalid();
  ig_tm_md.mcast_grp_a = 1065 + md.dptMeta.eventsCount;
  hdr.ethernet.ether_type = 0x1111;
}
action from_wire_to_bg() {
  ig_tm_md.mcast_grp_a = 1065 + md.dptMeta.eventsCount;
  hdr.ethernet.ether_type = 0x1111;
  exit;
}
action from_wire_to_bg_wire() {
  ig_tm_md.ucast_egress_port = (bit<9>)md.dptMeta.outPort;
  ig_tm_md.mcast_grp_a = 1065 + md.dptMeta.eventsCount;
  hdr.ethernet.ether_type = 0x1111;
}
table dpt_0_lucid_return_table {
  key = {
    md.dptMeta.eventType : ternary;
    md.dptMeta.eventsCount : ternary;
    md.dptMeta.exitEventType : ternary;
    hdr.ev_out_flags.report : ternary;
  }
  actions = {
    from_any_to_none; from_bg_to_wire; from_bg_to_selfbg; from_bg_to_selfbg_wire; bg_hdl_report_to_otherbg; bg_hdl_report_to_otherbg_wire; from_wire_to_bg; from_wire_to_bg_wire;
  }
  const entries = {
    (_, 0, 0, _) : from_any_to_none();
    (_, 0, _, _) : from_bg_to_wire();
    (2, _, 0, 1) : from_bg_to_selfbg();
    (2, _, _, 1) : from_bg_to_selfbg_wire();
    (2, _, 0, 0) : bg_hdl_report_to_otherbg();
    (2, _, _, 0) : bg_hdl_report_to_otherbg_wire();
    (_, _, 0, _) : from_wire_to_bg();
    (_, _, _, _) : from_wire_to_bg_wire();
  }
}
    
[pragma_replace_trans] -------------- block: DPT_DISPATCH--------------
[pragma_replace_trans] code:
 
    dpt_1_merged_tbl.apply();
    dpt_2_merged_tbl.apply();
    dpt_3_merged_tbl.apply();
    dpt_4_merged_tbl.apply();
    dpt_5_merged_tbl.apply();
    dpt_6_merged_tbl.apply(); 
    dpt_0_lucid_return_table.apply();
[pragma_replace_trans] -------------- block: DPT_HANDLERS--------------
[pragma_replace_trans] code:
 
    dpt_1_merged_tbl.apply();
    dpt_2_merged_tbl.apply();
    dpt_3_merged_tbl.apply();
    dpt_4_merged_tbl.apply();
    dpt_5_merged_tbl.apply();
    dpt_6_merged_tbl.apply(); 
    dpt_0_lucid_return_table.apply();
[pragma_replace_trans] -------------- block: DPT_HEADERS--------------
[pragma_replace_trans] code:
    #define e_ip_in 1
    #define e_report 2
    #define e_ip_out 3
    struct fmt_hist_arr {
        bit<32> lo;
    }
    struct fmt_total_arr {
        bit<32> lo;
    }
    struct ip_in_t {
        bit<8> eventType;
        bit<32> eventLoc;
        bit<32> eventDelay;
        bit<9> igr_port;
        bit<32> src;
        bit<32> dst;
        bit<16> len;
        bit<8> tos;
    }
    header report_t {
        bit<8> eventType;
        bit<32> eventLoc;
        bit<32> eventDelay;
        bit<32> idx;
    }
    struct ip_out_t {
        bit<8> eventType;
        bit<32> eventLoc;
        bit<32> eventDelay;
        bit<9> egr_port;
        bit<32> src;
        bit<32> dst;
    }
    header lucid_footer_t {
        bit<8> end;
    }
    header ev_out_flags_t {
        bit<1> ip_in;
        bit<1> report;
        bit<1> ip_out;
        bit<5> pad_1_meta;
    }
    struct dptMeta_t {
        bit<32> timestamp;
        bit<8> eventType;
        bit<8> exitEventType;
        bit<8> nextEventType;
        bit<16> eventsCount;
        bit<9> outPort;
    }
[pragma_replace_trans] -------------- block: DPT_HEADER_INSTANCES--------------
[pragma_replace_trans] code:
    report_t report;
    lucid_footer_t lucid_footer;
    ev_out_flags_t ev_out_flags;
[pragma_replace_trans] -------------- block: DPT_METADATA_INSTANCES--------------
[pragma_replace_trans] code:
    ip_in_t ip_in;
    ip_out_t ip_out;
    dptMeta_t dptMeta;
[pragma_replace_trans] -------------- block: DPT_PARSER--------------
[pragma_replace_trans] code:
parser DptIngressParser (packet_in pkt, out header_t hdr, out metadata_t md) {
    state start {
        md.dptMeta.eventType = pkt.lookahead<bit<8>>();
        transition select(md.dptMeta.eventType) {
            0 : finish;
            
            2 : event_0_parse_report;
            
        }
    }
    state event_0_parse_report {
        pkt.extract(hdr.report);
        transition selector_1;
        
    }
    state selector_1 {
        bit<8> tmp = pkt.lookahead<bit<8>>();
        transition select(tmp) {
            0 : finish;
            
            2 : event_1_parse_report;
            
        }
    }
    state event_1_parse_report {
        pkt.extract(hdr.report);
        transition selector_2;
        
    }
    state selector_2 {
        bit<8> tmp = pkt.lookahead<bit<8>>();
        transition select(tmp) {
            0 : finish;
            
            2 : event_2_parse_report;
            
        }
    }
    state event_2_parse_report {
        pkt.extract(hdr.report);
        transition selector_3;
        
    }
    state selector_3 {
        bit<8> tmp = pkt.lookahead<bit<8>>();
        transition select(tmp) {
            0 : finish;
            
            2 : event_3_parse_report;
            
        }
    }
    state event_3_parse_report {
        pkt.extract(hdr.report);
        transition finish;
        
    }
    state finish {
        pkt.extract(hdr.lucid_footer);
        
        pkt.extract(hdr.ev_out_flags);
        transition accept;
        
    }
}
[pragma_replace_trans] -------------- block: DPT_EGRESS_OBJECTS--------------
[pragma_replace_trans] code:
 
    action acn_nonlucid_wire() {
  
}
action acn_lucid_wire() {
  hdr.ethernet.ether_type = 0x0800;
  hdr.lucid_footer.setInvalid();
  hdr.ev_out_flags.setInvalid();
  hdr.report.setInvalid();
}
action acn_bgev_report() {
  hdr.ev_out_flags.report = 0;
  hdr.report.setValid();
}
table dpt_0_egr_serialize_clone {
  key = {
    hdr.ethernet.ether_type : ternary;
    eg_intr_md.egress_rid : ternary;
    hdr.ev_out_flags.report : ternary;
  }
  actions = {
    acn_nonlucid_wire; acn_lucid_wire; acn_bgev_report;
  }
  const entries = {
    (2048, 0, _) : acn_nonlucid_wire();
    (4369, 0, _) : acn_lucid_wire();
    (4369, 1, 1) : acn_bgev_report();
  }
}
    
[pragma_replace_trans] -------------- block: DPT_EGRESS--------------
[pragma_replace_trans] code:
 
    dpt_0_egr_serialize_clone.apply();
[pragma_replace_trans] -------------- block: ENTRY_OBJECTS--------------
[pragma_replace_trans] code:
action trigger_ip_in() {
  md.dptMeta.eventType=e_ip_in;
  md.ip_in.igr_port = ig_intr_md.ingress_port;
  md.ip_in.src = hdr.ip.src_addr;
  md.ip_in.dst = hdr.ip.dst_addr;
  md.ip_in.len = hdr.ip.total_len;
  md.ip_in.tos = hdr.ip.tos;
}
table entry_table {
  key = {
    hdr.ip.isValid() : ternary;
    ig_intr_md.ingress_port : ternary;
  }
  actions = {
    trigger_ip_in;
  }
  const entries = {
    (true, 128) : trigger_ip_in();
  }
}
[pragma_replace_trans] -------------- block: ENTRY_CALL--------------
[pragma_replace_trans] code:
if (md.dptMeta.eventType == 0) { entry_table.apply();}
[pragma_replace_trans] -------------- block: EXIT_OBJECTS--------------
[pragma_replace_trans] code:
action a_ip_out() {
  ig_tm_md.ucast_egress_port = md.ip_out.egr_port;
  hdr.ip.src_addr = md.ip_out.src;
  hdr.ip.dst_addr = md.ip_out.dst;
}
table exit_table {
  key = {
    md.dptMeta.exitEventType : ternary;
  }
  actions = {
    a_ip_out;
  }
  const entries = {
    (e_ip_out) : a_ip_out();
  }
}
[pragma_replace_trans] -------------- block: EXIT_CALL--------------
[pragma_replace_trans] code:
if (md.dptMeta.exitEventType != 0) { exit_table.apply();}
