
memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

memop min_arg(int x, int y) {
   
    return x + 1;
}

memop test_min(int x, int y) {
     
    if (x > y)  {
        return x;
    }
    else{

        return 0;
    }
}
const  int<<32>> SELF = 0;

const  int<<32>> SEED = 2048;

exit event packetout(int<<32>> outport,int<<32>> switch,int<<32>> count) ;

const int<<32>> CONTROL  = 0;
entry control event rule_heavy_hitter_1(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) ;

entry control event event_packet(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) ;

handle event_packet(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) {
     generate rule_heavy_hitter_1(CTR, src, dst, bytes, ip);
}

global Array.t<<32>> heavy_hitter_count = Array.create(1024);


entry control event event_heavy_hitter(int<<32>> src,int<<32>> count) ;

handle event_heavy_hitter(int<<32>> src,int<<32>> count) {
  int<<16>> idx_2 = hash<<16>>(SEED,src);
   Array.set(heavy_hitter_count,idx_2,count);
}

handle rule_heavy_hitter_1(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) {
    int<<16>> idx_3 = hash<<16>>(SEED,src);
    int min_success = Array.update(heavy_hitter_count, idx_3,
        test_min, 5,
        min_arg, SEED);
    if(min_success != 0){
        generate packetout(CONTROL, SELF, min_success);
    }
}


/*
table packet(@CTR key  : int src, int dst, int bytes, int ip value :) with merge min bytes
table heavy_hitter(key : int src value : int count) with merge min port

rule heavy_hitter(src, count) with merge freq count,k  :- packet(@CTR src, dest, bytes, ip); count > 5, int a = 5; generate_switch (CONTROL, packetout(CONTROL, SELF,  count)); 

exit event packetout(int outport, int switch, int count);
const int<<32>> CONTROL = 0;
*/