entry control event rule_groupby_1_1(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) ;

entry control event rule_groupby_2_2(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) ;

entry control event event_packet(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) ;

global Array.t<<32>> ip_table_ip = Array.create(1024);


entry control event event_ip_table(int<<32>> ip,int<<32>> ip) ;

global Array.t<<32>> groupby_1_dst = Array.create(1024);


global Array.t<<32>> groupby_1_bytes = Array.create(1024);


global Array.t<<32>> groupby_1_src = Array.create(1024);


entry control event event_groupby_1(int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> src) ;

global Array.t<<32>> groupby_2_dst = Array.create(1024);


global Array.t<<32>> groupby_2_bytes = Array.create(1024);


global Array.t<<32>> groupby_2_src = Array.create(1024);


entry control event event_groupby_2(int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> src) ;

handle event_packet(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) {
  generate rule_groupby_1_1(CTR, src, dst, bytes, ip);
  generate rule_groupby_2_2(CTR, src, dst, bytes, ip);

}

handle event_ip_table(int<<32>> ip,int<<32>> ip) {
int<<16>> idx_3 = hash<<16>>(2048,ip);
Array.set(ip_table_ip,idx_3,ip);
}

handle event_groupby_1(int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> src) {
int<<16>> idx_4 = hash<<16>>(2048,src);
Array.set(groupby_1_dst,idx_4,src);
Array.set(groupby_1_bytes,idx_4,bytes);
Array.set(groupby_1_src,idx_4,dst);
}

handle event_groupby_2(int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> src) {
int<<16>> idx_5 = hash<<16>>(2048,src);
Array.set(groupby_2_dst,idx_5,src);
Array.set(groupby_2_bytes,idx_5,bytes);
Array.set(groupby_2_src,idx_5,dst);
}

handle rule_groupby_1_1(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) {
if (ip==192) {
int<<32>> a = 6;
int<<16>> idx_6 = hash<<16>>(2048,src);
Array.set(groupby_1_dst,idx_6,dst);
Array.set(groupby_1_bytes,idx_6,bytes);
Array.set(groupby_1_src,idx_6,src);
} 
}

handle rule_groupby_2_2(int<<32>> CTR,int<<32>> src,int<<32>> dst,int<<32>> bytes,int<<32>> ip) {
if (ip==153) {
int<<32>> a = 7;
int<<16>> idx_7 = hash<<16>>(2048,src);
Array.set(groupby_2_dst,idx_7,dst);
Array.set(groupby_2_bytes,idx_7,bytes);
Array.set(groupby_2_src,idx_7,src);
} 
}

/*
table packet(@CTR key  : int src, int dst, int bytes value : int ip) with merge min bytes
table groupby_1(key : int src value : int dst, int bytes, int src) with merge min port
table groupby_2(key : int src value : int dst, int bytes, int src) with merge min port

rule groupby_1(src, dst, bytes, src) with merge min k  :- packet(@CTR src, dest, bytes, ip); ip == 192, int a = 6;
rule groupby_2(src, dst, bytes, src) with merge freq count,k  :- packet(@CTR src, dest, bytes, ip) ; ip ==153, int a = 7; 
*/